{"ts":1342738670209,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"describe('tbd-util-sequantial', function() {\n    var tbd = require('../lib/');\n    \n    it('should generate a sequential value for each record', function () {\n        var data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(0))\n                    .make(2);\n                    \n        expect(data[0].foo).toBe(0);\n        expect(data[1].foo).toBe(1);\n    });\n    \n    it('should handle letters', function () {\n        var data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential('a'))\n                    .make(2);\n                    \n        expect(data[0].foo).toBe('a');\n        expect(data[1].foo).toBe('b');\n    });\n    \n    it('should append a new letter to sequential words', function () {\n        var data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential('hello'))\n                    .make(2);\n                    \n        expect(data[0].foo).toBe('hello');\n        expect(data[1].foo).toBe('helloa');\n    });\n    \n    it('should not blow up when starting a sequence at the end of the char list', function () {\n        var data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential('z'))\n                    .make(2);\n                    \n        expect(data[0].foo).toBe('z');\n        expect(data[1].foo).toBe('a');\n    });\n    \n    it('should handle sequential dates', function () {\n        var start = new Date(),\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start))\n                    .make(2);\n                    \n        expect(data[0].foo).toEqual(start);\n        expect(data[1].foo).not.toEqual(start);\n    });\n    \n    it('should increment by year when specified', function () {\n        var start = new Date(),\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start, 'y'))\n                    .make(2);\n                    \n        expect(data[0].foo.getFullYear()).toEqual(start.getFullYear());\n        expect(data[1].foo.getFullYear()).toEqual(start.getFullYear() + 1);\n    });\n    \n    it('should increment by month when specified', function () {\n        var start = new Date(),\n            month = start.getMonth() == 11 ? 0 : start.getMonth + 1,\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start, 'M'))\n                    .make(2);\n                    \n        expect(data[0].foo.getMonth()).toEqual(start.getMonth());\n        expect(data[1].foo.getMonth()).toEqual(month);\n    });\n    \n    it('should increment by day when specified', function () {\n        var start = new Date(),\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start, 'd'))\n                    .make(2);\n                    \n        expect(data[0].foo.getDate()).toEqual(start.getDate());\n        expect(data[1].foo.getDate()).toEqual(start.getDate() + 1);\n    });\n    \n    it('should increment by hour when specified', function () {\n        var start = new Date(),\n            hours = start.getHours() === 23 ? 0 : start.getHours() + 1,\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start, 'h'))\n                    .make(2);\n\n        expect(data[0].foo.getHours()).toEqual(start.getHours());\n        expect(data[1].foo.getHours()).toEqual(hours);\n    });\n    \n    it('should increment by minutes when specified', function () {\n        var start = new Date(),\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start, 'm'))\n                    .make(2);\n                    \n        expect(data[0].foo.getMinutes()).toEqual(start.getMinutes());\n        expect(data[1].foo.getMinutes()).toEqual(start.getMinutes() + 1);\n    });\n    \n    it('should increment by seconds when specified', function () {\n        var start = new Date(),\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start, 's'))\n                    .make(2);\n                    \n        expect(data[0].foo.getSeconds()).toEqual(start.getSeconds());\n        expect(data[1].foo.getSeconds()).toEqual(start.getSeconds() + 1);\n    });\n    \n    it('should know that going past the end of a month rolls over to a new month', function () {\n        var start = new Date(2011, 2, 1),\n            data = tbd.from({})\n                    .prop('foo').use(tbd.utils.sequential(start, 'd'))\n                    .make(30);\n\n        //just of note you have to +1 the month as it returns a 0-based month index\n        expect(data[29].foo.getMonth() + 1).not.toEqual(2);\n        expect(data[29].foo.getMonth() + 1).toEqual(3);\n    });\n});"]],"start1":0,"start2":0,"length1":0,"length2":4672}]],"length":4672}
{"contributors":[],"silentsave":false,"ts":1342738729116,"patch":[[{"diffs":[[0,"getMonth"],[1,"()"],[0," + 1,\n  "]],"start1":2235,"start2":2235,"length1":16,"length2":18}]],"length":4674,"saved":false}
