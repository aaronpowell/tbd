{"ts":1342738436271,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"describe('tbd-builder', function() {\n    var tbd = require('../lib/');\n    \n    beforeEach(function() {\n        this.addMatchers({\n            toBeInArray: function(array) {\n                return ~array.indexOf(this.actual);\n            },\n            toBeInDateRange: function(min, max) {\n                var actual = this.actual.getTime();\n                return actual <= max.getTime() && actual >= min.getTime();\n            },\n            toBeInNumericalRange: function (min, max) {\n                var actual = this.actual;\n                return actual <= max && actual >= min;\n            }\n        });\n    });\n    \n    it('should allow usage of undefined', function() {\n        var amount = 10,\n            data = tbd.from().make(amount);\n        \n        expect(data.length).toEqual(amount);\n    });\n    \n    it('should return an empty set with no make amount', function() {\n        var data = tbd.from().make();\n        \n        expect(data.length).toEqual(0);\n    });\n    \n    it('should allow making from property builder', function() {\n        var number = 10,\n            data = tbd.from({ foo: 'bar' }).prop('foo').make(number),\n            data2 = tbd.from({ foo: 'bar' }).make(number);\n            \n        expect(data.length).toEqual(number);\n        expect(data.length).toEqual(data2.length);\n    });\n    \n    it('should allow functions in the object literal', function () {\n        var data = tbd.from({\n            a: 1,\n            b: function () { return 'hello'; },\n            c: tbd.utils.range(1, 10),\n            d: tbd.utils.random('a', 'b', 'c'),\n            e: tbd.utils.sequential(1)\n        }).make(1);\n        \n        expect(data.length).toEqual(1);\n        expect(data[0].a).toEqual(1);\n        expect(data[0].b).toEqual('hello');\n        expect(data[0].c).toBeInNumericalRange(1, 10);\n        expect(data[0].d).toBeInArray('a', 'b', 'c');\n        expect(data[0].e).toEqual(1);\n    });\n});"]],"start1":0,"start2":0,"length1":0,"length2":1927}]],"length":1927}
{"ts":1342738524631,"patch":[[{"diffs":[[0,"on(array) {\n"],[1,"                debugger;\n"],[0,"            "]],"start1":162,"start2":162,"length1":24,"length2":50}]],"length":1953,"saved":false}
{"ts":1342738601200,"patch":[[{"diffs":[[0,"unction("],[-1,"array"],[0,") {\n    "]],"start1":157,"start2":157,"length1":21,"length2":16},{"diffs":[[0,"    "],[-1,"debugger"],[1,"var array = [].slice.call(arguments)"],[0,";\n  "]],"start1":181,"start2":181,"length1":16,"length2":44}]],"length":1976,"saved":false}
